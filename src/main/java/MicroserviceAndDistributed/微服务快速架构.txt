单体架构：例如：
    消费金融销售系统


谷歌 安卓  苹果                销售  保险  影响

    UI                              DB
    JAVA

    DB

SOA架构 面向服务架构    如传统银行主要业务系统

余额查询
行内转账                         柜面
ATM取现       核心系统
ATM转出
POS消费                       卡系统
POS预售权          渠道整合(ATM银联POS)
活期转定期       手机银行                    支付系统    （实时贷记，实时借记，实时代收，实时代付，实时冲正）
卡挂失     直销银行        理财系统

  服务化


SOA面向服务架构 例如传统银行主要业务系统


柜面  卡系统 渠道整合    核心系统

    ESB企业服务总线

支付系统    手机银行    直销银行    理财系统

ESB服务管理，注册和发布

报文转换(json->>xml)
        (http-->>MQ)

大型单体应用缺点：（jekins+docker+kubernate可以进行快速部署）
    1.耦合度高，开发困难
    2.部署耗时长
    3.稳定性差

微服务架构：消费金融提单系统

    API Gateway

        Rest

 销售服务   保险服务    影像服务

        Register Center

微服务架构的优势：
    1.边界清晰，开发简单
    2.技术栈灵活
    3.松耦合
    4.可用性高
    5.按需扩展

微服务架构的不足：
    1.运维的难度变大了
    2.代码依赖变成了接口依赖
    3.分布式的复杂
      网络延迟
      容错
      消息序列化
      数据一致性
      异步

SSM转微服务

框架:SpringBoot+mybatis+Mysql
前端 BootStrap+AngularJs
消息中间件 rabbitMQ
缓存redis
调度器 Quartz


服务寻址问题：多服务、多实例、动态扩容和缩容



服务消费者   调用      服务提供者

    查询    注册中心集群      注册  服务提供者

Demo
    1.pom依赖
    2.启动类注解
    3.配置文件

1.服务调用方式  RestTemplate
2.服务负载均衡问题

4.服务调用参数传递问题
    一次声明，到处使用
    调用远程服务就像调用本地方法一样

    声明式服务调用 --Feign （通过FeignClient调用远程服务方法）

6.大量配置文件：多服务，多实例，多环境
动态刷新
Spring Cloud Config -配置中心

怎么实施微服务
    框架：注册中心，配置中心，网关，断路器，负载，声明式服务调用
    服务拆分：

线程隔离、熔断降级









